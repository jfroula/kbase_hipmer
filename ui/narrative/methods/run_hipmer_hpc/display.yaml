#
# define display information
#
name: Assemble with HipMer
tooltip: |
    Assemble paired-end microbial reads using the HipMer assembly pipeline.
screenshots: []

icon: icon.png

#
# define a set of similar methods that might be useful to the user
#
suggestions:
    apps:
        related:
            []
        next:
            []
    methods:
        related:
            []
        next:
            [annotate_contigset]

#
# Configure the display and description of parameters
#
parameters :
    read_library_name :
        ui-name : Read Library
        short-hint : Read library (only PairedEnd Libs supported now)
    output_contigset_name:
        ui-name : Output ContigSet name
        short-hint : Enter a name for the assembled contigs data object
    mer_size:
        ui-name : k-mer size
        short-hint : k-mer size to use in the assembly process
    is_diploid:
        ui-name : Is the genome diploid (true/false)
        short-hint : |
            Is this a diploid genome?  If so, HipMer will attempt to
            identify and merge haplotype variants (bubbles in the k-mer graph)
            See also 'bubble_min_depth_cutoff'

    min_depth_cutoff:
        ui-name : Min Depth Cutoff
        short-hint : |
            K-mers present at frequencies less than this cutoff get culled from the assembly
            early on.  To auto-detect, set to 0

    dynamic_min_depth:
        ui-name : Dynamic Min Depth
        short-hint : TBD

    gap_close_rpt_depth_ratio:
        ui-name : Gap Close Repeat Depth Ratio
        short-hint : |
            Scaffolds with depth of coverage this many times higher than the
            average across all scaffolds are considered repeats
            and won't participate in gap closure (default 2.0)

    assm_scaff_len_cutoff:
        ui-name : Assembly Scaffold Lenth cutoff
        short-hint : TBD

    prefix:
        ui-name : prefix
        short-hint : TBD

    ins_avg:
        ui-name : Insert Average (int)
        short-hint :  Average Insert Length for Parid-End Reads

    ins_dev:
        ui-name : Insert Deviation (int)
        short-hint :  Std. Deviation of Insert Length for Parid-End Reads

    avg_read_len:
        ui-name : Average Read Len (int)
        short-hint :  Average Read Length

    has_innie_artifact:
        ui-name : Has Innie Artifact (T/F)
        short-hint :  Does the read have innie Artifacts

    is_rev_comped:
        ui-name : Is Reversed Comped (T/F)
        short-hint :  TBD

    use_for_contigging:
        ui-name : Use for Contigging (T/F)
        short-hint :  Should this read be used for Contigging

    ono_set_id:
        ui-name : ONO Set ID
        short-hint :  TBD

    use_for_gap_closing:
        ui-name : Use for Gap Closing (T/F)
        short-hint :  TBD

    fp_wiggle_room:
        ui-name : Five Prime Wiggle Room (int)
        short-hint :  TBD

    tp_wiggle_room:
        ui-name : Three Prime Wiggle Room (int)
        short-hint :  TBD

    use_for_splinting:
        ui-name : Use for Splinting (T/F)
        short-hint :  TBD

parameter-groups :
    reads :
        ui-name : Reads
        short-hint : |
            Reads objects and options to use in the assembly.


# For diploid organisms, this is the depth cutoff to exclude unresolved haplotypes.
# To auto-detect, set to 0.
# To keep both haplotypes in cases where they couldn't be merged, set it to 1  (Note, this will hinder gap closing and scaffolding)
#
#bubble_min_depth_cutoff
#
# min mercount to report: counts below this threshold will not be output by the mercounter.
# Typically you would leave this at 2.
#
#min_mercount_to_report  2
# Close gaps more aggressively accepting closures that might violate the estimated gap size
#
#gap_close_aggressive 1
#
# estimated genome size in Gb
#
#genome_size 	   1.0

description : |
    <p>KBase wrapper for the HipMer Assembler.</p>
    <p>HipMer is a high performance parallelization and port of Meraculous ( http://jgi.doe.gov/data-and-tools/meraculous/ ).
       It is largely written in UPC, with the exception of the UFX generation, which is written in C++/MPI.</p>
    <p>For more details see: https://sourceforge.net/p/hipmer/wiki/Home/</p>
    <p>This project is a joint collaboration between UC Berkeley ( http://www.eecs.berkeley.edu ),
    JGI ( http://jgi.doe.gov ), and CRD ( http://crd.lbl.gov/ )</p>

    <p>Primary authors are: Evangelos Georganas, Aydin Buluc, Steven Hofmeyr, Leonid Oliker and
    Rob Egan, with direction and advice from Kathy Yelick. The original Meraculous was developed by
    Jarrod Chapman, Isaac Ho, Eugene Goltsman, and Daniel Rokhsar.</p>
    <p><b>Known limitations</b>: HipMer is still under active development.
    The wrapping of HipMer in KBase does not currently support multiple read libraries and many of the options are hard-coded.</p>

publications :
    -
        display-text : |
            Georganas, Evangelos, et al. "HipMer: an extreme-scale de novo genome assembler." Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis. ACM, 2015.
    -
        display-text : |
            J. A. Chapman, I. Ho, S. Sunkara, S. Luo, G. P. Schroth, and D. S. Rokhsar, "Meraculous: De novo genome assembly with short paired-end reads," PLoS ONE, vol. 6, no. 8, p. e23501, 08 2011.
